// this is for emacs file handling -*- mode: c++; indent-tabs-mode: nil -*-

// -- BEGIN LICENSE BLOCK ----------------------------------------------
// Copyright 2020 FZI Forschungszentrum Informatik
// Created on behalf of Universal Robots A/S
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -- END LICENSE BLOCK ------------------------------------------------

//----------------------------------------------------------------------
/*!\file
 *
 * \author  Felix Exner mauch@fzi.de
 * \date    2020-07-09
 *
 */
//----------------------------------------------------------------------

#include <gtest/gtest.h>

#include <ur_client_library/comm/bin_parser.h>
#include <ur_client_library/primary/primary_parser.h>

using namespace urcl;

unsigned char raw_data[] = {
  0x00, 0x00, 0x05, 0xbf, 0x10, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x04, 0x9c, 0x87, 0x7f, 0xf8, 0x01,
  0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x01,
  0x40, 0x15, 0x89, 0xb9, 0xa0, 0x00, 0x00, 0x00, 0x40, 0x15, 0x89, 0xb7, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xbd, 0x57, 0x18, 0x34, 0x42, 0x3e, 0x74, 0x53, 0x41, 0xed, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xfd, 0xbf, 0xf7, 0x97, 0xb5, 0x8c, 0x52, 0x45, 0x50, 0xbf, 0xf7, 0x97, 0xbd, 0x58, 0x52, 0x45, 0x50,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x27, 0xa5, 0x09, 0x42, 0x3e, 0x65, 0xa5, 0x41, 0xf4, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xc0, 0x05, 0xc9, 0x52, 0x60, 0x00, 0x00, 0x00, 0xc0, 0x05, 0xc9, 0x59, 0x60,
  0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x85, 0xc5, 0x81, 0x42, 0x3e, 0x83, 0x00,
  0x41, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xbf, 0xf3, 0x14, 0x8c, 0xcc, 0x52, 0x45, 0x50, 0xbf, 0xf3,
  0x14, 0xa4, 0x6c, 0x52, 0x45, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x77, 0x02, 0x3b, 0x42,
  0x3e, 0x65, 0xa5, 0x42, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xbf, 0x96, 0xed, 0xd4, 0x44, 0x2d, 0x18,
  0x00, 0xbf, 0x96, 0xe5, 0x34, 0x44, 0x2d, 0x18, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x37,
  0x2a, 0x27, 0x42, 0x3e, 0x83, 0x00, 0x42, 0x1d, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x40, 0x08, 0x13, 0x72,
  0x40, 0x00, 0x00, 0x00, 0x40, 0x08, 0x13, 0x72, 0xc0, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3c, 0xbd, 0x2b, 0x48, 0x42, 0x3e, 0x39, 0x9e, 0x42, 0x22, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x00,
  0x00, 0x00, 0x65, 0x04, 0xbf, 0xa3, 0x56, 0x0a, 0xd8, 0xab, 0xe1, 0xc1, 0xbf, 0xd4, 0xdf, 0x01, 0x9c, 0x33, 0x4b,
  0xe9, 0x3f, 0xc7, 0x82, 0xfd, 0x1e, 0xfc, 0x1f, 0xe5, 0xbf, 0xf9, 0x19, 0xa6, 0xcb, 0xa7, 0xcf, 0x17, 0xbf, 0xf7,
  0x4b, 0x73, 0x19, 0x28, 0x8c, 0xfc, 0x40, 0x01, 0x6a, 0xf6, 0xae, 0x78, 0xab, 0xf9, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe1, 0x05, 0xad, 0x33, 0xdc, 0x43, 0xad, 0x52, 0x81, 0xf1, 0x2e,
  0x6a, 0x72, 0x7e, 0xad, 0xe9, 0x54, 0x2d, 0xad, 0xe8, 0xf5, 0x9e, 0xad, 0xeb, 0x88, 0x89, 0x3e, 0x58, 0xb7, 0x52,
  0x37, 0x00, 0x00, 0x00, 0x3f, 0xda, 0x3d, 0xdc, 0x79, 0x9e, 0xb9, 0xec, 0x40, 0x14, 0xed, 0x48, 0x93, 0xe2, 0x13,
  0x60, 0x3f, 0xe4, 0x86, 0xb0, 0xe7, 0xf1, 0xca, 0x9e, 0x3e, 0x84, 0x41, 0x1e, 0x96, 0x7e, 0x00, 0x00, 0x3e, 0xa0,
  0x82, 0x46, 0x96, 0x5a, 0x00, 0x00, 0x3f, 0x26, 0x18, 0x3b, 0x6b, 0xe3, 0xed, 0x33, 0xbf, 0xd8, 0xf7, 0x98, 0xba,
  0x58, 0x2a, 0x97, 0xbf, 0xd4, 0x19, 0xd6, 0x44, 0x6b, 0x34, 0x85, 0x3f, 0x1f, 0xaa, 0x89, 0x47, 0x6c, 0x84, 0x7a,
  0xbe, 0xef, 0x01, 0x0f, 0xfb, 0xb4, 0x20, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc4, 0xc1,
  0x5f, 0x95, 0x34, 0x38, 0x6a, 0x40, 0x64, 0x04, 0xe3, 0x36, 0x9b, 0xf9, 0x53, 0xc0, 0x6b, 0xab, 0x59, 0xb7, 0xa6,
  0xa2, 0xec, 0x40, 0x4e, 0xaa, 0xec, 0x6f, 0x63, 0x01, 0xfd, 0x3f, 0xb9, 0x83, 0xdc, 0xec, 0xb9, 0x10, 0x9a, 0x3f,
  0xb9, 0x87, 0x6a, 0x0b, 0xb9, 0xb4, 0xfc, 0x3f, 0xf9, 0x21, 0x17, 0x86, 0x80, 0x32, 0xe0, 0x3f, 0x51, 0x58, 0xdb,
  0xb7, 0x00, 0x50, 0xb6, 0x3f, 0x6f, 0x65, 0x0e, 0x77, 0x42, 0xe7, 0x3e, 0x3f, 0xf9, 0x1a, 0xa7, 0x3b, 0xc0, 0xb4,
  0xeb, 0xbf, 0xf9, 0x2a, 0x45, 0x93, 0x44, 0x14, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x35, 0x09, 0x3f, 0xe2, 0x52, 0x62, 0x73, 0x85, 0xeb, 0x0c, 0x3f, 0xfa, 0x55, 0xb0,
  0x75, 0xda, 0xac, 0x08, 0x3f, 0xfc, 0x18, 0x09, 0x2b, 0xcd, 0x55, 0x80, 0x3f, 0xd4, 0x53, 0x0f, 0x7a, 0xa0, 0x7f,
  0xcc, 0x3f, 0xcd, 0xf4, 0x17, 0x0c, 0xcd, 0xec, 0xc8, 0xbf, 0xc7, 0x8e, 0x59, 0x16, 0xa2, 0xec, 0x24, 0x00, 0x00,
  0x00, 0x4b, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x3f, 0xbc, 0x8d, 0x9c, 0x00, 0x00,
  0x00, 0x00, 0x3f, 0xc3, 0x77, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x70, 0x62, 0x4d, 0xe0, 0x00, 0x00,
  0x00, 0x3f, 0x70, 0x62, 0x4d, 0xe0, 0x00, 0x00, 0x00, 0x42, 0x08, 0xc0, 0x00, 0x42, 0x3e, 0xd9, 0x0d, 0x3f, 0x0c,
  0x14, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x65, 0xf5, 0xbb, 0x2b, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,
  0x25, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x58, 0xc4, 0x40, 0x42, 0x1f, 0x80, 0x00, 0xfd, 0x00, 0x00, 0x01, 0xbd,
  0x06, 0xc0, 0x19, 0x57, 0x99, 0x28, 0x2c, 0x2f, 0x63, 0x40, 0x19, 0x57, 0x99, 0x28, 0x2c, 0x2f, 0x63, 0xc0, 0x19,
  0x57, 0x99, 0x28, 0x2c, 0x2f, 0x63, 0x40, 0x19, 0x57, 0x99, 0x28, 0x2c, 0x2f, 0x63, 0xc0, 0x19, 0x57, 0x99, 0x28,
  0x2c, 0x2f, 0x63, 0x40, 0x19, 0x57, 0x99, 0x28, 0x2c, 0x2f, 0x63, 0xc0, 0x19, 0x57, 0x99, 0x28, 0x2c, 0x2f, 0x63,
  0x40, 0x19, 0x57, 0x99, 0x28, 0x2c, 0x2f, 0x63, 0xc0, 0x19, 0x57, 0x99, 0x28, 0x2c, 0x2f, 0x63, 0x40, 0x19, 0x57,
  0x99, 0x28, 0x2c, 0x2f, 0x63, 0xc0, 0x19, 0x57, 0x99, 0x28, 0x2c, 0x2f, 0x63, 0x40, 0x19, 0x57, 0x99, 0x28, 0x2c,
  0x2f, 0x63, 0x40, 0x0a, 0xbb, 0x94, 0xed, 0xdd, 0xc6, 0xb1, 0x40, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
  0x0a, 0xbb, 0x94, 0xed, 0xdd, 0xc6, 0xb1, 0x40, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x0a, 0xbb, 0x94,
  0xed, 0xdd, 0xc6, 0xb1, 0x40, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x0a, 0xbb, 0x94, 0xed, 0xdd, 0xc6,
  0xb1, 0x40, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x0a, 0xbb, 0x94, 0xed, 0xdd, 0xc6, 0xb1, 0x40, 0x44,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x0a, 0xbb, 0x94, 0xed, 0xdd, 0xc6, 0xb1, 0x40, 0x44, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3f, 0xf0, 0xc1, 0x52, 0x38, 0x2d, 0x73, 0x65, 0x3f, 0xf6, 0x57, 0x18, 0x4a, 0xe7, 0x44, 0x87,
  0x3f, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf3, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3f, 0xd0, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xdb, 0x33, 0x33, 0x33, 0x33,
  0x33, 0x33, 0xbf, 0xd9, 0x19, 0xce, 0x07, 0x5f, 0x6f, 0xd2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc4, 0xcc, 0xcc,
  0xcc, 0xcc, 0xcc, 0xcd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x3f, 0xc1, 0x0f, 0xf9, 0x72, 0x47, 0x45, 0x39, 0x3f, 0xb9, 0x85, 0xf0, 0x6f, 0x69, 0x44, 0x67, 0x3f, 0xb9,
  0x7f, 0x62, 0xb6, 0xae, 0x7d, 0x56, 0x3f, 0xf9, 0x21, 0xfb, 0x54, 0x52, 0x45, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf9, 0x21, 0xfb, 0x54, 0x52, 0x45, 0x50,
  0xbf, 0xf9, 0x21, 0xfb, 0x54, 0x52, 0x45, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x3d, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x3e, 0x80, 0x4a, 0xad, 0x81, 0xf7, 0x98, 0x78, 0x00, 0x00, 0x00, 0x09, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x2b, 0x0a, 0x65, 0xf5, 0xbb, 0x2b, 0x00, 0x01, 0xbf, 0xb9, 0x24, 0x07, 0xe2, 0x9d, 0x71, 0xb2, 0xbf, 0x9a,
  0x90, 0xa7, 0x16, 0xd3, 0x2a, 0x62, 0x3f, 0xe2, 0xbc, 0xae, 0xd2, 0xd2, 0xce, 0x76, 0x3f, 0xc0, 0xa3, 0xd7, 0x0a,
  0x3d, 0x70, 0xa4, 0x00, 0x00, 0x00, 0x1a, 0x0b, 0x01, 0x00, 0x0f, 0x42, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
  0x00, 0x01, 0x3f, 0xc0, 0x00, 0x00, 0x40, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0c, 0x00, 0x01, 0x01, 0x00,
  0x00, 0x00, 0x55, 0x0e, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x59,
  0x37, 0x08, 0xaa, 0xc9, 0x6c, 0xc6, 0x3f, 0x59, 0x37, 0x08, 0xaa, 0xc9, 0x6c, 0xc6, 0x3f, 0x59, 0x37, 0x08, 0xaa,
  0xc9, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* First RobotState of UR10e from real robot 5.11
 *
 * This package contains:
 *  - ROBOT_MODE_DATA,
 *  - JOINT_DATA,
 *  - CARTESIAN_INFO,
 *  - KINEMATICS_INFO,
 *  - CALIBRATION_DATA
 *  - MASTERBOARD_DATA,
 *  - TOOL_DATA,
 *  - CONFIGURATION_DATA,
 *  - FORCE_MODE_DATA,
 *  - ADDITIONAL_INFO,
 *  - SAFETY_DATA
 *  - TOOL_COMMUNICATION_INFO,
 *  - TOOL_MODE_INFO,
 *  - SINGULARITY_INFO
 *  - TYPE_14
 */

TEST(primary_parser, parse_robot_mode_data)
{
  comm::BinParser bp(raw_data, sizeof(raw_data));

  std::vector<std::unique_ptr<primary_interface::PrimaryPackage>> products;
  primary_interface::PrimaryParser parser;
  parser.parse(bp, products);

  EXPECT_EQ(products.size(), 14);

  if (primary_interface::RobotModeData* data = dynamic_cast<primary_interface::RobotModeData*>(products[0].get()))
  {
    EXPECT_EQ(data->timestamp_, 19805995000);
    EXPECT_EQ(data->is_real_robot_connected_, true);
    EXPECT_EQ(data->is_real_robot_enabled_, true);
    EXPECT_EQ(data->is_robot_power_on_, true);
    EXPECT_EQ(data->is_emergency_stopped_, false);
    EXPECT_EQ(data->is_protective_stopped_, false);
    EXPECT_EQ(data->is_program_running_, false);
    EXPECT_EQ(data->is_program_paused_, false);
    EXPECT_EQ(unsigned(data->robot_mode_), 7);    // Robot mode running
    EXPECT_EQ(unsigned(data->control_mode_), 0);  // Control mode position
    EXPECT_EQ(data->target_speed_fraction_, 1);
    EXPECT_EQ(data->speed_scaling_, 0);
    EXPECT_EQ(data->target_speed_fraction_limit_, 1);
    EXPECT_EQ(static_cast<int>(data->reserved_[0]), 0);
  }
  else
  {
    std::cout << "Failed to get robot mode data" << std::endl;
    GTEST_FAIL();
  }
}

TEST(primary_parser, parse_joint_data)
{
  comm::BinParser bp(raw_data, sizeof(raw_data));

  std::vector<std::unique_ptr<primary_interface::PrimaryPackage>> products;
  primary_interface::PrimaryParser parser;
  parser.parse(bp, products);

  EXPECT_EQ(products.size(), 14);

  if (primary_interface::JointData* data = dynamic_cast<primary_interface::JointData*>(products[1].get()))
  {
    vector6d_t q_actual = { 5.384497166, -1.474538372, -2.723301649, -1.192517088, -0.02239162127, 3.009495258 };
    for (size_t i = 0; i < data->q_actual_.size(); ++i)
    {
      EXPECT_NEAR(data->q_actual_[i], q_actual[i], std::abs(q_actual[i] * 1.0e-5));
    }
    vector6d_t q_target = { 5.384488583, -1.474545808, -2.723315001, -1.192539619, -0.0223587195, 3.009496212 };
    for (size_t i = 0; i < data->q_target_.size(); ++i)
    {
      EXPECT_NEAR(data->q_target_[i], q_target[i], std::abs(q_target[i] * 1.0e-5));
    }
    EXPECT_EQ(data->qd_actual_, vector6d_t({ 0, 0, 0, 0, 0, 0 }));
    vector6d_t i_actual = { -0.05251331627, 0.6548619866, 1.045089841, 0.2412194461, -0.1788717359, 0.02309192717 };
    for (size_t i = 0; i < data->i_actual_.size(); ++i)
    {
      EXPECT_NEAR(data->i_actual_[i], i_actual[i], std::abs(i_actual[i] * 1.0e-5));
    }
    vector6d_t v_actual = { 47.61359787, 47.59926224, 47.62792969, 47.59926224, 47.62792969, 47.55626678 };
    for (size_t i = 0; i < data->v_actual_.size(); ++i)
    {
      EXPECT_NEAR(data->v_actual_[i], v_actual[i], std::abs(v_actual[i] * 1.0e-5));
    }
    EXPECT_EQ(data->t_motor_, vector6f_t({ 29.625, 30.5625, 30.625, 35.875, 39.3125, 40.625 }));
    for (size_t i = 0; i < data->joint_mode_.size(); ++i)
    {
      EXPECT_EQ(unsigned(data->joint_mode_[i]), 253);
    }
  }
  else
  {
    std::cout << "Failed to get joint data" << std::endl;
    GTEST_FAIL();
  }
}

TEST(primary_parser, parse_cartesian_info)
{
  comm::BinParser bp(raw_data, sizeof(raw_data));

  std::vector<std::unique_ptr<primary_interface::PrimaryPackage>> products;
  primary_interface::PrimaryParser parser;
  parser.parse(bp, products);

  EXPECT_EQ(products.size(), 14);

  if (primary_interface::CartesianInfo* data = dynamic_cast<primary_interface::CartesianInfo*>(products[2].get()))
  {
    vector6d_t flange_coordinates = { -0.03776582618, -0.3261112237, 0.1836849595,
                                      -1.568762584,   -1.455920313,  2.17722832 };
    for (size_t i = 0; i < data->flange_coordinates_.size(); ++i)
    {
      EXPECT_NEAR(data->flange_coordinates_[i], flange_coordinates[i], std::abs(flange_coordinates[i] * 1.0e-5));
    }
    vector6d_t tcp_offset_coordinates = { 0, 0, 0, 0, 0, 0 };
    for (size_t i = 0; i < data->tcp_offset_coordinates_.size(); ++i)
    {
      EXPECT_NEAR(data->tcp_offset_coordinates_[i], tcp_offset_coordinates[i],
                  std::abs(tcp_offset_coordinates[i] * 1.0e-5));
    }
  }
  else
  {
    std::cout << "Failed to get cartesian info" << std::endl;
    GTEST_FAIL();
  }
}

TEST(primary_parser, parse_calibration_data)
{
  comm::BinParser bp(raw_data, sizeof(raw_data));

  std::vector<std::unique_ptr<primary_interface::PrimaryPackage>> products;
  primary_interface::PrimaryParser parser;
  parser.parse(bp, products);

  EXPECT_EQ(products.size(), 14);

  if (primary_interface::KinematicsInfo* data = dynamic_cast<primary_interface::KinematicsInfo*>(products[3].get()))
  {
    EXPECT_EQ(data->checksum_,
              vector6uint32_t({ 2905857091, 2907865585, 778728062, 2917749805, 2917725598, 2917894281 }));
    vector6d_t dh_theta = { 2.30187e-08, 0.410026, 5.23172, 0.641442, 1.50907e-07, 4.92003e-07 };
    for (size_t i = 0; i < data->dh_theta_.size(); ++i)
    {
      EXPECT_NEAR(data->dh_theta_[i], dh_theta[i], std::abs(dh_theta[i] * 1.0e-5));
    }
    vector6d_t dh_a = { 0.000168569, -0.390112, -0.314077, 0.000120797, -1.47839e-05, 0 };
    for (size_t i = 0; i < data->dh_a_.size(); ++i)
    {
      EXPECT_NEAR(data->dh_a_[i], dh_a[i], std::abs(dh_a[i] * -1.0e-5));
    }
    vector6d_t dh_d = { 0.162151, 160.153, -221.355, 61.3353, 0.0996683, 0.0997225 };
    for (size_t i = 0; i < data->dh_d_.size(); ++i)
    {
      EXPECT_NEAR(data->dh_d_[i], dh_d[i], std::abs(dh_d[i] * 1.0e-5));
    }
    vector6d_t dh_alpha = { 1.57058, 0.00105878, 0.00383237, 1.56901, -1.57282, 0 };
    for (size_t i = 0; i < data->dh_alpha_.size(); ++i)
    {
      EXPECT_NEAR(data->dh_alpha_[i], dh_alpha[i], std::abs(dh_alpha[i] * 1.0e-5));
    }
  }
  else
  {
    std::cout << "Failed to get kinematics info" << std::endl;
    GTEST_FAIL();
  }
}

TEST(primary_parser, parse_force_mode_data)
{
  comm::BinParser bp(raw_data, sizeof(raw_data));

  std::vector<std::unique_ptr<primary_interface::PrimaryPackage>> products;
  primary_interface::PrimaryParser parser;
  parser.parse(bp, products);

  EXPECT_EQ(products.size(), 14);

  if (primary_interface::ForceModeData* data = dynamic_cast<primary_interface::ForceModeData*>(products[8].get()))
  {
    vector6d_t wrench = { 0, 0, 0, 0, 0, 0 };
    for (size_t i = 0; i < data->wrench_.size(); ++i)
    {
      EXPECT_NEAR(data->wrench_[i], wrench[i], std::abs(wrench[i] * 1.0e-5));
    }
    double robot_dexterity = 1.213826985e-07;
    EXPECT_NEAR(data->robot_dexterity_, robot_dexterity, std::abs(robot_dexterity * 1.0e-5));
  }
  else
  {
    std::cout << "Failed to get force mode data" << std::endl;
    GTEST_FAIL();
  }
}

TEST(primary_parser, parse_additional_info)
{
  comm::BinParser bp(raw_data, sizeof(raw_data));

  std::vector<std::unique_ptr<primary_interface::PrimaryPackage>> products;
  primary_interface::PrimaryParser parser;
  parser.parse(bp, products);

  EXPECT_EQ(products.size(), 14);

  if (primary_interface::AdditionalInfo* data = dynamic_cast<primary_interface::AdditionalInfo*>(products[9].get()))
  {
    EXPECT_EQ(unsigned(data->tp_button_state_), false);
    EXPECT_EQ(data->freedrive_button_enabled_, false);
    EXPECT_EQ(data->io_enabled_freedrive_, false);
  }
  else
  {
    std::cout << "Failed to get additional info" << std::endl;
    GTEST_FAIL();
  }
}

TEST(primary_parser, parse_global_variables_setup_message)
{
  unsigned char raw_program_state_msg_data[] = { 0x00, 0x00, 0x00, 0x50, 0x19, 0x00, 0x00, 0x00, 0x00, 0x56, 0x76, 0xd3,
                                                 0xa0, 0x00, 0x00, 0x00, 0x6c, 0x6f, 0x77, 0x0a, 0x66, 0x61, 0x72, 0x0a,
                                                 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x73, 0x0a, 0x6d, 0x65,
                                                 0x64, 0x69, 0x75, 0x6d, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x76,
                                                 0x61, 0x0a, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x0a, 0x68,
                                                 0x69, 0x67, 0x68, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x0a, 0x6f, 0x6e,
                                                 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x0a };
  comm::BinParser bp(raw_program_state_msg_data, sizeof(raw_program_state_msg_data));

  std::vector<std::unique_ptr<primary_interface::PrimaryPackage>> products;
  primary_interface::PrimaryParser parser;
  parser.parse(bp, products);

  EXPECT_EQ(products.size(), 1);

  if (primary_interface::GlobalVariablesSetupMessage* data =
          dynamic_cast<primary_interface::GlobalVariablesSetupMessage*>(products[0].get()))
  {
    EXPECT_EQ(data->start_index_, 0);
    EXPECT_EQ(data->variable_names_, "low\nfar\nn_repeats\nmedium\nreset_va\nblending\nhigh\nclose\non_return\n");
  }
  else
  {
    std::cout << "Failed to get Global Variables Update Message info" << std::endl;
    GTEST_FAIL();
  }
}

int main(int argc, char* argv[])
{
  ::testing::InitGoogleTest(&argc, argv);

  return RUN_ALL_TESTS();
}
